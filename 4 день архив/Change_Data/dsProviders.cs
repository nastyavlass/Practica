//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Change_Data {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsProviders : DataSet {
        
        private ПоставщикиDataTable tableПоставщики;
        
        public dsProviders() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsProviders(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Поставщики"] != null)) {
                    this.Tables.Add(new ПоставщикиDataTable(ds.Tables["Поставщики"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ПоставщикиDataTable Поставщики {
            get {
                return this.tableПоставщики;
            }
        }
        
        public override DataSet Clone() {
            dsProviders cln = ((dsProviders)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Поставщики"] != null)) {
                this.Tables.Add(new ПоставщикиDataTable(ds.Tables["Поставщики"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableПоставщики = ((ПоставщикиDataTable)(this.Tables["Поставщики"]));
            if ((this.tableПоставщики != null)) {
                this.tableПоставщики.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsProviders";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/dsProviders.xsd";
            this.Locale = new System.Globalization.CultureInfo("ru-RU");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableПоставщики = new ПоставщикиDataTable();
            this.Tables.Add(this.tableПоставщики);
        }
        
        private bool ShouldSerializeПоставщики() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void ПоставщикиRowChangeEventHandler(object sender, ПоставщикиRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ПоставщикиDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnАдрес_поставщика;
            
            private DataColumn columnКод_поставщика;
            
            private DataColumn columnПоставщик;
            
            private DataColumn columnТелефон;
            
            internal ПоставщикиDataTable() : 
                    base("Поставщики") {
                this.InitClass();
            }
            
            internal ПоставщикиDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Адрес_поставщикаColumn {
                get {
                    return this.columnАдрес_поставщика;
                }
            }
            
            internal DataColumn Код_поставщикаColumn {
                get {
                    return this.columnКод_поставщика;
                }
            }
            
            internal DataColumn ПоставщикColumn {
                get {
                    return this.columnПоставщик;
                }
            }
            
            internal DataColumn ТелефонColumn {
                get {
                    return this.columnТелефон;
                }
            }
            
            public ПоставщикиRow this[int index] {
                get {
                    return ((ПоставщикиRow)(this.Rows[index]));
                }
            }
            
            public event ПоставщикиRowChangeEventHandler ПоставщикиRowChanged;
            
            public event ПоставщикиRowChangeEventHandler ПоставщикиRowChanging;
            
            public event ПоставщикиRowChangeEventHandler ПоставщикиRowDeleted;
            
            public event ПоставщикиRowChangeEventHandler ПоставщикиRowDeleting;
            
            public void AddПоставщикиRow(ПоставщикиRow row) {
                this.Rows.Add(row);
            }
            
            public ПоставщикиRow AddПоставщикиRow(string Адрес_поставщика, string Поставщик, string Телефон) {
                ПоставщикиRow rowПоставщикиRow = ((ПоставщикиRow)(this.NewRow()));
                rowПоставщикиRow.ItemArray = new object[] {
                        Адрес_поставщика,
                        null,
                        Поставщик,
                        Телефон};
                this.Rows.Add(rowПоставщикиRow);
                return rowПоставщикиRow;
            }
            
            public ПоставщикиRow FindByКод_поставщика(int Код_поставщика) {
                return ((ПоставщикиRow)(this.Rows.Find(new object[] {
                            Код_поставщика})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ПоставщикиDataTable cln = ((ПоставщикиDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ПоставщикиDataTable();
            }
            
            internal void InitVars() {
                this.columnАдрес_поставщика = this.Columns["Адрес поставщика"];
                this.columnКод_поставщика = this.Columns["Код поставщика"];
                this.columnПоставщик = this.Columns["Поставщик"];
                this.columnТелефон = this.Columns["Телефон"];
            }
            
            private void InitClass() {
                this.columnАдрес_поставщика = new DataColumn("Адрес поставщика", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnАдрес_поставщика);
                this.columnКод_поставщика = new DataColumn("Код поставщика", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnКод_поставщика);
                this.columnПоставщик = new DataColumn("Поставщик", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnПоставщик);
                this.columnТелефон = new DataColumn("Телефон", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnТелефон);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnКод_поставщика}, true));
                this.columnКод_поставщика.AutoIncrement = true;
                this.columnКод_поставщика.AllowDBNull = false;
                this.columnКод_поставщика.Unique = true;
            }
            
            public ПоставщикиRow NewПоставщикиRow() {
                return ((ПоставщикиRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ПоставщикиRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ПоставщикиRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ПоставщикиRowChanged != null)) {
                    this.ПоставщикиRowChanged(this, new ПоставщикиRowChangeEvent(((ПоставщикиRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ПоставщикиRowChanging != null)) {
                    this.ПоставщикиRowChanging(this, new ПоставщикиRowChangeEvent(((ПоставщикиRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ПоставщикиRowDeleted != null)) {
                    this.ПоставщикиRowDeleted(this, new ПоставщикиRowChangeEvent(((ПоставщикиRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ПоставщикиRowDeleting != null)) {
                    this.ПоставщикиRowDeleting(this, new ПоставщикиRowChangeEvent(((ПоставщикиRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveПоставщикиRow(ПоставщикиRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ПоставщикиRow : DataRow {
            
            private ПоставщикиDataTable tableПоставщики;
            
            internal ПоставщикиRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableПоставщики = ((ПоставщикиDataTable)(this.Table));
            }
            
            public string Адрес_поставщика {
                get {
                    try {
                        return ((string)(this[this.tableПоставщики.Адрес_поставщикаColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableПоставщики.Адрес_поставщикаColumn] = value;
                }
            }
            
            public int Код_поставщика {
                get {
                    return ((int)(this[this.tableПоставщики.Код_поставщикаColumn]));
                }
                set {
                    this[this.tableПоставщики.Код_поставщикаColumn] = value;
                }
            }
            
            public string Поставщик {
                get {
                    try {
                        return ((string)(this[this.tableПоставщики.ПоставщикColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableПоставщики.ПоставщикColumn] = value;
                }
            }
            
            public string Телефон {
                get {
                    try {
                        return ((string)(this[this.tableПоставщики.ТелефонColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableПоставщики.ТелефонColumn] = value;
                }
            }
            
            public bool IsАдрес_поставщикаNull() {
                return this.IsNull(this.tableПоставщики.Адрес_поставщикаColumn);
            }
            
            public void SetАдрес_поставщикаNull() {
                this[this.tableПоставщики.Адрес_поставщикаColumn] = System.Convert.DBNull;
            }
            
            public bool IsПоставщикNull() {
                return this.IsNull(this.tableПоставщики.ПоставщикColumn);
            }
            
            public void SetПоставщикNull() {
                this[this.tableПоставщики.ПоставщикColumn] = System.Convert.DBNull;
            }
            
            public bool IsТелефонNull() {
                return this.IsNull(this.tableПоставщики.ТелефонColumn);
            }
            
            public void SetТелефонNull() {
                this[this.tableПоставщики.ТелефонColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ПоставщикиRowChangeEvent : EventArgs {
            
            private ПоставщикиRow eventRow;
            
            private DataRowAction eventAction;
            
            public ПоставщикиRowChangeEvent(ПоставщикиRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ПоставщикиRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
